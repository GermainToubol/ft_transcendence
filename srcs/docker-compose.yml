# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    docker-compose.yml                                 :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: gtoubol <marvin@42.fr>                     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/12/13 09:12:15 by gtoubol           #+#    #+#              #
#    Updated: 2022/12/13 09:12:15 by gtoubol          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Volumes
# ------------------------------------------------------------------------
volumes:
  tr_data:
    name: tr_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${TR_BACK_SRCS}"

  # --------------------------
  db_data: {}

# Networks
# ------------------------------------------------------------------------
networks:
  private-net:
    name: "private-net"
    driver: "bridge"


# Servicies
# ------------------------------------------------------------------------
services:
  backend-install:
    container_name: backend-install
    build:
      context: ./img_backend
      dockerfile: Dockerfile
      target: backend-installer
    volumes:
      - "tr_data:/root/srcs"

  # --------------------------
  backend:
    container_name: backend
    build:
      context: ./img_backend
      dockerfile: Dockerfile
      target: backend-runner
    ports:
      - 3000:3000
    volumes:
      - "tr_data:/root/srcs"
    networks:
      - private-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost:3000"]
    depends_on:
      backend-install:
        condition: service_completed_successfully

  # --------------------------
  database:
    container_name: "database"
    image: postgres:alpine
    restart: always
    networks:
      - private-net
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: ${PGDATA}
    volumes:
      - db_data:/var/lib/postgresql/data

  # --------------------------
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - private-net
